# Node.js
# Build a general Node.js project with npm.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

trigger:
- master

pool:
  vmImage: ubuntu-latest

variables:
  - name: someVariable
    value: 'someValue'
  # stored as pipeline secret, however cant read this
  - name: someSecretVariable
    value: '$(SomeConnectionString)' 
  - name: TF_VAR_APP_NAME
    value: 'someapp'
  # still need to pass pipline secret as following:
  # -input=false -var "VM_ADMIN_PASSWORD=$(TF_VAR_admin_password)"
  - name: TerraformBackend.ResourceGroup
    value: "TF-ResourceGroup"
  - name: TerraformBackend.StorageAccount
    value: "tfsabob"
  - name: TerraformBackend.ContainerName
    value: "tfstate"
  - name: TerraformBackend.File
    value: "terraform.tfstate"

stages:

  - stage: terraform
    jobs:
      - job: terraform
        steps:
        - task: TerraformInstaller@0
          displayName: install terraform
          inputs:
            terraformVersion: '1.0.3'
        - script: |
            echo "Hello World"
            cd terraform
            # Bash Script no simple way of passing service connection, or secret peipline variable
            # terraform plan -input=false -var "VM_ADMIN_PASSWORD=$(TF_VAR_admin_password)"
          displayName: "Terraform Bash script"
        - task: TerraformTaskV1@0
          displayName: "Terraform Init"
          inputs:
            provider: 'azurerm'
            command: 'init'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            backendServiceArm: azure-bob
            backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
            backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
            backendAzureRmContainerName: $(TerraformBackend.ContainerName)
            backendAzureRmKey: $(TerraformBackend.File)
            
        - task: TerraformTaskV1@0
          displayName: "Terraform Plan"
          inputs:
            provider: 'azurerm'
            command: 'plan'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            environmentServiceNameAzureRM: azure-bob # the same name by which azure service conn was created
            commandOptions: -out=tfplan -input=false   
            backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
            backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
            backendAzureRmContainerName: $(TerraformBackend.ContainerName)
            backendAzureRmKey: $(TerraformBackend.File)      
        - task: TerraformTaskV1@0
          displayName: "Terraform Apply"
          inputs:
            provider: 'azurerm'
            command: 'apply'
            workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/'
            environmentServiceNameAzureRM: azure-bob # the same name by which azure service conn was created
            commandOptions: -input=false tfplan
            backendAzureRmResourceGroupName: $(TerraformBackend.ResourceGroup)
            backendAzureRmStorageAccountName: $(TerraformBackend.StorageAccount)
            backendAzureRmContainerName: $(TerraformBackend.ContainerName)
            backendAzureRmKey: $(TerraformBackend.File)
  - stage: npm
    jobs:
    - job: build_and_install_node 
      steps:
      - task: NodeTool@0
        inputs:
          versionSpec: '10.x'
        displayName: 'Install Node.js'
      - script: |
          npm install # download 3rd party libraries
          # npm run build
        displayName: 'npm install and build'
  